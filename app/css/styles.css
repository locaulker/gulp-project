/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
.github .facebook {
  background-image: url(../images/sprites.png);
  background-position: 0px -120px;
  width: 121px;
  height: 120px;
}

.github .github {
  background-image: url(../images/sprites.png);
  background-position: -149px 0px;
  width: 142px;
  height: 120px;
}

.github .twitter {
  background-image: url(../images/sprites.png);
  background-position: 0px 0px;
  width: 149px;
  height: 120px;
}

.github .youtube {
  background-image: url(../images/sprites.png);
  background-position: -121px -120px;
  width: 120px;
  height: 120px;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9hcHAvc2Nzcy9zdHlsZXMuY3NzIiwiL2FwcC9zY3NzL3N0eWxlcy5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7OztFQVlFO0FBbURGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBeUJFO0FBMkJGOzs7OztFQUtFO0FDdEhGO0VEdUdFLDZDQUF1QjtFQUx2QixnQ0E3RWlDO0VBbUVqQyxhQW5Fd0M7RUF1RXhDLGNBdkUrQztDQXVHNUM7O0FDNUhMO0VEdUdFLDZDQUF1QjtFQUx2QixnQ0FsRStCO0VBd0QvQixhQXhEc0M7RUE0RHRDLGNBNUQ2QztDQTRGMUM7O0FDNUhMO0VEdUdFLDZDQUF1QjtFQUx2Qiw2QkF2RDJCO0VBNkMzQixhQTdDa0M7RUFpRGxDLGNBakR5QztDQWlGdEM7O0FDNUhMO0VEdUdFLDZDQUF1QjtFQUx2QixtQ0E1Q3FDO0VBa0NyQyxhQWxDNEM7RUFzQzVDLGNBdENtRDtDQXNFaEQiLCJmaWxlIjoic3R5bGVzLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5TQ1NTIHZhcmlhYmxlcyBhcmUgaW5mb3JtYXRpb24gYWJvdXQgaWNvbidzIGNvbXBpbGVkIHN0YXRlLCBzdG9yZWQgdW5kZXIgaXRzIG9yaWdpbmFsIGZpbGUgbmFtZVxuXG4uaWNvbi1ob21lIHtcbiAgd2lkdGg6ICRpY29uLWhvbWUtd2lkdGg7XG59XG5cblRoZSBsYXJnZSBhcnJheS1saWtlIHZhcmlhYmxlcyBjb250YWluIGFsbCBpbmZvcm1hdGlvbiBhYm91dCBhIHNpbmdsZSBpY29uXG4kaWNvbi1ob21lOiB4IHkgb2Zmc2V0X3ggb2Zmc2V0X3kgd2lkdGggaGVpZ2h0IHRvdGFsX3dpZHRoIHRvdGFsX2hlaWdodCBpbWFnZV9wYXRoO1xuXG5BdCB0aGUgYm90dG9tIG9mIHRoaXMgc2VjdGlvbiwgd2UgcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgc3ByaXRlc2hlZXQgaXRzZWxmXG4kc3ByaXRlc2hlZXQ6IHdpZHRoIGhlaWdodCBpbWFnZSAkc3ByaXRlc2hlZXQtc3ByaXRlcztcbiovXG4kZmFjZWJvb2stbmFtZTogJ2ZhY2Vib29rJztcbiRmYWNlYm9vay14OiAwcHg7XG4kZmFjZWJvb2steTogMTIwcHg7XG4kZmFjZWJvb2stb2Zmc2V0LXg6IDBweDtcbiRmYWNlYm9vay1vZmZzZXQteTogLTEyMHB4O1xuJGZhY2Vib29rLXdpZHRoOiAxMjFweDtcbiRmYWNlYm9vay1oZWlnaHQ6IDEyMHB4O1xuJGZhY2Vib29rLXRvdGFsLXdpZHRoOiAyOTFweDtcbiRmYWNlYm9vay10b3RhbC1oZWlnaHQ6IDI0MHB4O1xuJGZhY2Vib29rLWltYWdlOiAnLi4vaW1hZ2VzL3Nwcml0ZXMucG5nJztcbiRmYWNlYm9vazogKDBweCwgMTIwcHgsIDBweCwgLTEyMHB4LCAxMjFweCwgMTIwcHgsIDI5MXB4LCAyNDBweCwgJy4uL2ltYWdlcy9zcHJpdGVzLnBuZycsICdmYWNlYm9vaycsICk7XG4kZ2l0aHViLW5hbWU6ICdnaXRodWInO1xuJGdpdGh1Yi14OiAxNDlweDtcbiRnaXRodWIteTogMHB4O1xuJGdpdGh1Yi1vZmZzZXQteDogLTE0OXB4O1xuJGdpdGh1Yi1vZmZzZXQteTogMHB4O1xuJGdpdGh1Yi13aWR0aDogMTQycHg7XG4kZ2l0aHViLWhlaWdodDogMTIwcHg7XG4kZ2l0aHViLXRvdGFsLXdpZHRoOiAyOTFweDtcbiRnaXRodWItdG90YWwtaGVpZ2h0OiAyNDBweDtcbiRnaXRodWItaW1hZ2U6ICcuLi9pbWFnZXMvc3ByaXRlcy5wbmcnO1xuJGdpdGh1YjogKDE0OXB4LCAwcHgsIC0xNDlweCwgMHB4LCAxNDJweCwgMTIwcHgsIDI5MXB4LCAyNDBweCwgJy4uL2ltYWdlcy9zcHJpdGVzLnBuZycsICdnaXRodWInLCApO1xuJHR3aXR0ZXItbmFtZTogJ3R3aXR0ZXInO1xuJHR3aXR0ZXIteDogMHB4O1xuJHR3aXR0ZXIteTogMHB4O1xuJHR3aXR0ZXItb2Zmc2V0LXg6IDBweDtcbiR0d2l0dGVyLW9mZnNldC15OiAwcHg7XG4kdHdpdHRlci13aWR0aDogMTQ5cHg7XG4kdHdpdHRlci1oZWlnaHQ6IDEyMHB4O1xuJHR3aXR0ZXItdG90YWwtd2lkdGg6IDI5MXB4O1xuJHR3aXR0ZXItdG90YWwtaGVpZ2h0OiAyNDBweDtcbiR0d2l0dGVyLWltYWdlOiAnLi4vaW1hZ2VzL3Nwcml0ZXMucG5nJztcbiR0d2l0dGVyOiAoMHB4LCAwcHgsIDBweCwgMHB4LCAxNDlweCwgMTIwcHgsIDI5MXB4LCAyNDBweCwgJy4uL2ltYWdlcy9zcHJpdGVzLnBuZycsICd0d2l0dGVyJywgKTtcbiR5b3V0dWJlLW5hbWU6ICd5b3V0dWJlJztcbiR5b3V0dWJlLXg6IDEyMXB4O1xuJHlvdXR1YmUteTogMTIwcHg7XG4keW91dHViZS1vZmZzZXQteDogLTEyMXB4O1xuJHlvdXR1YmUtb2Zmc2V0LXk6IC0xMjBweDtcbiR5b3V0dWJlLXdpZHRoOiAxMjBweDtcbiR5b3V0dWJlLWhlaWdodDogMTIwcHg7XG4keW91dHViZS10b3RhbC13aWR0aDogMjkxcHg7XG4keW91dHViZS10b3RhbC1oZWlnaHQ6IDI0MHB4O1xuJHlvdXR1YmUtaW1hZ2U6ICcuLi9pbWFnZXMvc3ByaXRlcy5wbmcnO1xuJHlvdXR1YmU6ICgxMjFweCwgMTIwcHgsIC0xMjFweCwgLTEyMHB4LCAxMjBweCwgMTIwcHgsIDI5MXB4LCAyNDBweCwgJy4uL2ltYWdlcy9zcHJpdGVzLnBuZycsICd5b3V0dWJlJywgKTtcbiRzcHJpdGVzaGVldC13aWR0aDogMjkxcHg7XG4kc3ByaXRlc2hlZXQtaGVpZ2h0OiAyNDBweDtcbiRzcHJpdGVzaGVldC1pbWFnZTogJy4uL2ltYWdlcy9zcHJpdGVzLnBuZyc7XG4kc3ByaXRlc2hlZXQtc3ByaXRlczogKCRmYWNlYm9vaywgJGdpdGh1YiwgJHR3aXR0ZXIsICR5b3V0dWJlLCApO1xuJHNwcml0ZXNoZWV0OiAoMjkxcHgsIDI0MHB4LCAnLi4vaW1hZ2VzL3Nwcml0ZXMucG5nJywgJHNwcml0ZXNoZWV0LXNwcml0ZXMsICk7XG5cbi8qXG5UaGUgcHJvdmlkZWQgbWl4aW5zIGFyZSBpbnRlbmRlZCB0byBiZSB1c2VkIHdpdGggdGhlIGFycmF5LWxpa2UgdmFyaWFibGVzXG5cbi5pY29uLWhvbWUge1xuICBAaW5jbHVkZSBzcHJpdGUtd2lkdGgoJGljb24taG9tZSk7XG59XG5cbi5pY29uLWVtYWlsIHtcbiAgQGluY2x1ZGUgc3ByaXRlKCRpY29uLWVtYWlsKTtcbn1cblxuRXhhbXBsZSB1c2FnZSBpbiBIVE1MOlxuXG5gZGlzcGxheTogYmxvY2tgIHNwcml0ZTpcbjxkaXYgY2xhc3M9XCJpY29uLWhvbWVcIj48L2Rpdj5cblxuVG8gY2hhbmdlIGBkaXNwbGF5YCAoZS5nLiBgZGlzcGxheTogaW5saW5lLWJsb2NrO2ApLCB3ZSBzdWdnZXN0IHVzaW5nIGEgY29tbW9uIENTUyBjbGFzczpcblxuLy8gQ1NTXG4uaWNvbiB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbn1cblxuLy8gSFRNTFxuPGkgY2xhc3M9XCJpY29uIGljb24taG9tZVwiPjwvaT5cbiovXG5AbWl4aW4gc3ByaXRlLXdpZHRoKCRzcHJpdGUpIHtcbiAgd2lkdGg6IG50aCgkc3ByaXRlLCA1KTtcbn1cblxuQG1peGluIHNwcml0ZS1oZWlnaHQoJHNwcml0ZSkge1xuICBoZWlnaHQ6IG50aCgkc3ByaXRlLCA2KTtcbn1cblxuQG1peGluIHNwcml0ZS1wb3NpdGlvbigkc3ByaXRlKSB7XG4gICRzcHJpdGUtb2Zmc2V0LXg6IG50aCgkc3ByaXRlLCAzKTtcbiAgJHNwcml0ZS1vZmZzZXQteTogbnRoKCRzcHJpdGUsIDQpO1xuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAkc3ByaXRlLW9mZnNldC14ICAkc3ByaXRlLW9mZnNldC15O1xufVxuXG5AbWl4aW4gc3ByaXRlLWltYWdlKCRzcHJpdGUpIHtcbiAgJHNwcml0ZS1pbWFnZTogbnRoKCRzcHJpdGUsIDkpO1xuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoI3skc3ByaXRlLWltYWdlfSk7XG59XG5cbkBtaXhpbiBzcHJpdGUoJHNwcml0ZSkge1xuICBAaW5jbHVkZSBzcHJpdGUtaW1hZ2UoJHNwcml0ZSk7XG4gIEBpbmNsdWRlIHNwcml0ZS1wb3NpdGlvbigkc3ByaXRlKTtcbiAgQGluY2x1ZGUgc3ByaXRlLXdpZHRoKCRzcHJpdGUpO1xuICBAaW5jbHVkZSBzcHJpdGUtaGVpZ2h0KCRzcHJpdGUpO1xufVxuXG4vKlxuVGhlIGBzcHJpdGVzYCBtaXhpbiBnZW5lcmF0ZXMgaWRlbnRpY2FsIG91dHB1dCB0byB0aGUgQ1NTIHRlbXBsYXRlXG4gIGJ1dCBjYW4gYmUgb3ZlcnJpZGRlbiBpbnNpZGUgb2YgU0NTU1xuXG5AaW5jbHVkZSBzcHJpdGVzKCRzcHJpdGVzaGVldC1zcHJpdGVzKTtcbiovXG5AbWl4aW4gc3ByaXRlcygkc3ByaXRlcykge1xuICBAZWFjaCAkc3ByaXRlIGluICRzcHJpdGVzIHtcbiAgICAkc3ByaXRlLW5hbWU6IG50aCgkc3ByaXRlLCAxMCk7XG4gICAgLiN7JHNwcml0ZS1uYW1lfSB7XG4gICAgICBAaW5jbHVkZSBzcHJpdGUoJHNwcml0ZSk7XG4gICAgfVxuICB9XG59XG4iLCJAaW1wb3J0IFwic3ByaXRlc1wiO1xuXG4uZ2l0aHViIHtcbiAgQGluY2x1ZGUgc3ByaXRlcygkc3ByaXRlc2hlZXQtc3ByaXRlcyk7XG59XG5cbi8vIC50ZXN0aW5nIHtcbi8vICAgLy8gY29sb3I6ICRyZWQ7XG4vLyAgIC8vIHBlcmNlbnRhZ2UgaXMgYSBzYXNzIGZ1bmN0aW9uXG4vLyAgIHdpZHRoOiBwZXJjZW50YWdlKDQvNyk7XG4vLyB9XG5cbi8vIC5mbGV4IHtcbi8vICAgZGlzcGxheTogZmxleDtcbi8vIH1cbi8vXG4vLyAuYm9yZGVyLXJhZGl1cyB7XG4vLyAgIC13ZWJraXQtYm9yZGVyLXJhZGl1czogMTJweDtcbi8vICAgLW1vei1ib3JkZXItcmFkaXVzOiAxMnB4O1xuLy8gICBib3JkZXItcmFkaXVzOiAxMnB4O1xuLy8gfVxuLy9cbi8vIC8vIG1haW4uc2Nzc1xuLy8gQGltcG9ydCBcInRlc3RpbmdcIjtcbiJdfQ== */
